#!/bin/bash

#此处为硬编码
if [ $# -ne 1 ]; then
    echo "参数不合法,程序将退出!"
    exit 0
fi

#日志功能
function printLog()
{
    local dateStr=`date "+%Y-%m-%d %H:%M:%S"`
    if [ ! -f ${logFile} ]; then
        :>${logFile}
    fi
    echo "[${dateStr}] $@">>${logFile}
}

source $1

#邮件通知功能
function sendEmail()
{
    local subject="autorder通知"
    local messageInfo="$1"

    if [ $# -eq 2 ]; then
        subject="$1"
        messageInfo="$2"
    fi

    if [ ! "x${email}" = "x" ]; then
        echo "${messageInfo}" | mail -s "${subject}" ${email}
        if [ $? -ne 0 ]; then
            printLog "通知邮件发送失败：${messageInfo}"
        fi
    fi
}

declare -a machinesList    
machinesList="`cat ${machinesListFile}`"

declare -A lastEmailTimeOverdue=()
declare -A lastEmailTimeClockDiff=()
declare -A lastEmailTimeOrderFailed=()
declare -A lastEmailTimeOther=()
function updateLastEmailTime()
{
    for eachMachine  in ${machinesList[@]}
    do
        #上次发送"长期占用通知"的时间
        if [ "x${lastEmailTimeOverdue[${eachMachine}]}" = "x" ]; then
    	    lastEmailTimeOverdue[${eachMachine}]=0
        fi    
        #上次发送"时钟不一致通知"的时间
	    if [ "x${lastEmailTimeClockDiff[${eachMachine}]}" = "x" ]; then
    	    lastEmailTimeClockDiff[${eachMachine}]=0
        fi  
	    #上次发送"预定失败通知"的时间
	    if [ "x${lastEmailTimeOrderFailed[${eachMachine}]}" = "x" ]; then
    	    lastEmailTimeOrderFailed[${eachMachine}]=0
        fi  
        let index++
    done
    #上次发送"登录失败通知"的时间
    if [ "x${lastEmailTimeOther["loginFailed"]}" = "x" ]; then
    	lastEmailTimeOther["loginFailed"]=0
    fi

    #上次发送"未知错误通知"的时间
    if [ "x${lastEmailTimeOther["unknown"]}" = "x" ]; then
    	lastEmailTimeOther["unknown"]=0
    fi
}

if [ ! -f ${logFile} ]; then
    :>${logFile}
fi

echo -n 1 > ${loopFile}

messageInfo="(重新)启动autorder服务!"
printLog "${messageInfo}"
sendEmail ${messageInfo}

#请求之前是否需要登录:高频请求不需要总是登录
loginOption=1

#初始化"通知邮件"的"上次发送时间"记录
updateLastEmailTime

#控制脚本循环启停
while [ `cat ${loopFile}` -eq 1 ];
do
    #初始化"通知邮件"的"上次发送时间"记录
    updateLastEmailTime
    
    if [ ${loginOption} -eq 1 ]; then
        #登录,cookie
        rs=`curl -F "username=${username}" -F "password=${password}" --cookie-jar ${cookieFile} ${loginURL} > /dev/null`
        while [ ! $? -eq 0 ];
        do
            curl -F "username=${username}" -F "password=${password}" --cookie-jar ${cookieFile} ${loginURL} > /dev/null
            messageInfo="账号${username}登机房预定系统录失败,autoder将在3s后重试!"            
            printLog ${messageInfo}
            secondsNow=`date +%s`
            if [ $(( ${secondsNow} - ${lastEmailTimeOther["loginFailed"]} )) -gt ${warnEmailSendIntervalLoginFailed} ]; then
                sendEmail "${messageInfo}"
                lastEmailTimeOther["loginFailed"]=${secondsNow}
            fi	  
            sleep 3s
        done
        if [ $? -eq 0 ]; then
            printLog "登录成功!"
        fi
    fi

    minDiff=$(( 3600 * 24 * ${tenancy} ))
    machinesList="`cat ${machinesListFile}`"
    #初始化下一次进行检测的时间间隔值,默认为12天,以秒为单位存储在minDiff中
    #遍历配置文件中列出的每台要抢占地机器,检测其使用状态
    #    如已被占用,检测其距离到期的时间间隔,如小于minDiff,用该间隔值更新minDiff;对于 可能 已被长期占用的机器,给出警告
    #    如未被占用,申请该机器
    #下一次检测的时间 约 为 minDiff/60 秒后
    #距离到期的时间越近,检测频率越快,最快每秒钟检测一次,处于快速检测状态时,使用cookie登录
    #由于服务器时钟和本地时钟会有一定差异,因此在minDiff小于阀值时,开启高频检测模式  
    for eachMachine  in ${machinesList[@]}
    do
        detailURL="${detailURLPrefix}${eachMachine}"
        # </html>>操作系统</td><td>RedHat</td></tr><tr><td>使用人</td><td>姓名</td></tr><tr><td>开始时间</td><td>2017-04-23 09:37:55</td></tr><tr><td>时限</td><td>12 天</td></tr></table></center>
        rs=`curl -b ${cookieFile} ${detailURL}`
        wait
        if [[ ${rs} =~ "使用人" ]]; then
            startTimeStr=`echo "${rs}" | grep -E  '[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}' -o`
            lease=`echo "${rs}" | grep -E  '[0-9]{1,2} 天' -o | grep -E '[0-9]{2}' -o`
            startTime=`date -d "${startTimeStr}" +%s`
            deadline=`expr ${startTime} + $(( 3600 * 24 * ${lease} ))`
            secondsNow=`date +%s`
            diffSeconds=$(( ${deadline} - ${secondsNow} ))
            
            if [ ${diffSeconds} -lt 0 ]; then
                diffSeconds=$(( (-1) * ${diffSeconds} ))
                #服务器与本地的时间误差超过预定范围,可能是由于机器被长期占用所致
                if [ ${diffSeconds} -gt ${deviationLimit} ]; then 
                    messageInfo="警告:${eachMachine}可能被长期占有(开始时间:${startTimeStr}|时限:${lease}天),请及时确认!"
                    printLog ${messageInfo}               
                    #避免重复发送通知
                    if [ $(( ${secondsNow} - ${lastEmailTimeOverdue[${eachMachine}]} )) -gt ${warnEmailSendIntervalOverdue} ]; then
                        sendEmail "${messageInfo}" 
                        lastEmailTimeOverdue[${eachMachine}]=${secondsNow}
                    fi	                 
                    #过滤超期占用的机器对后面判断的干扰
                    diffSeconds=${minDiff}
                else
                    messageInfo="警告:${eachMachine}的租期已到,但被autorder检测到仍处于占用中,可能是服务器与本地时钟不一致所致,请确认!"
                    printLog ${messageInfo}      
                    #避免重复发送通知
                    if [ $(( ${secondsNow} - ${lastEmailTimeClockDiff[${eachMachine}]} )) -gt ${warnEmailSendIntervalClockDiff} ]; then
                        sendEmail "${messageInfo}"
                        lastEmailTimeClockDiff[${eachMachine}]=${secondsNow}
                    fi	                                     
                fi
            else
                printLog "${eachMachine}正在租期内,将在$(( ${diffSeconds} / ( 24 * 3600) ))天$(( ${diffSeconds} % ( 24 * 3600) / 3600 ))时$(( ${diffSeconds} % 3600 / 60 ))分$(( ${diffSeconds} % 60 ))秒后到期!"
            fi

            #if [ ${diffSeconds} -lt ${minDiff} ] && [ ${diffSeconds} -gt 0 ]; then
            if [ ${diffSeconds} -lt ${minDiff} ]; then
                minDiff=${diffSeconds}
            fi            
        elif [[ ${rs} =~ "申请使用" ]]; then
            orderURL="${orderURLPrefix}${eachMachine}"
            #默认按最大租期续租
            messageInfo="预定${eachMachine}成功!"
            curl -F "sel_num=${maxTenancy}" -b ${cookieFile} ${orderURL} > /dev/null
            secondsNow=`date +%s`
            if [ $? -ne 0 ]; then
                 messageInfo="预定${eachMachine}失败!"
                 if [ $(( ${secondsNow} - ${lastEmailTimeOrderFailed[${eachMachine}]} )) -gt ${warnEmailSendIntervalOrderFailed} ]; then
                    sendEmail "${messageInfo}"
                    lastEmailTimeOrderFailed[${eachMachine}]=${secondsNow}
                 fi	
            fi
            printLog ${messageInfo}
            sendEmail ${messageInfo}
        else 
            messageInfo="未知错误:${rs}!"
            printLog ${messageInfo}
            secondsNow=`date +%s`
            if [ $(( ${secondsNow} - ${lastEmailTimeOther["unknown"]} )) -gt ${warnEmailSendIntervalUnknown} ]; then
                sendEmail "${messageInfo}"
                lastEmailTimeOther["unknown"]=${secondsNow}
            fi		
            #重新检测
            minDiff=300
        fi
    done

    #使开始进行高频刷新:因为预定系统所在的服务器和autorder所在的本地有时间误差,所以autorder对抢占时间的预测并不一定绝对准确,随着越来越接近抢占目标的deadline,
    #刷新频率会越来越高,最快是1s,但这仍然可能发生这种情况：抢占目标到达deadline被系统释放时,autorder没有及时的刷新。因此,比较保险的方法就是加大刷新频率,但是这会
    #增大服务器的压力,更容易被发现。
    if [ ${minDiff} -lt ${highFreqLimit} ]; then
        #开始1秒一次的高频刷新
        minDiff=30
    fi

    sleepTime=$(( ${minDiff} / 60 + 1))

    printLog "将在${sleepTime}($(( ${sleepTime} / ( 24 * 3600) ))天$(( ${sleepTime} % ( 24 * 3600) / 3600 ))时$(( ${sleepTime} % 3600 / 60 ))分$(( ${sleepTime} % 60 ))秒)秒后再次检测!"

    if [ ${sleepTime} -gt ${threshold} ];then
        loginOption=1        
    else
        printLog "进入频繁刷新时期,切换到直接请求模式!" 
        loginOption=0
    fi

    sleep ${sleepTime}
done

messageInfo="警告:已停止autorder服务,请及时确认!"
printLog "${messageInfo}"
sendEmail ${messageInfo}
